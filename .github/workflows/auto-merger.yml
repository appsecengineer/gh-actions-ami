name: Update cms/master
on:
  push:
    branches:
      - dev
permissions:
      contents: write
      
jobs:
  update-cms-master:
    name: Merging dev into main
    runs-on: ubuntu-latest
    steps:
    
      - name: checkout
        uses: actions/checkout@v4
        
      - name: automerge dev to main
        uses: devmasx/merge-branch@master
        id: merge
        with:
          type: now
          from_branch: dev
          target_branch: main
          message: Automerging dev branch into main
          github_token: ${{ github.token }}
          
  deploy-to-aws:
    name: Deploy Application to AWS
    runs-on: ubuntu-latest
    needs: update-cms-master
    if: success()
    env:
      TF_IN_AUTOMATION: true
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Determine environment and AMI selection
        id: env-config
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          
          if [[ "$BRANCH_NAME" == "dev" || "${{ github.event_name }}" == "push" && "${{ contains(github.ref, 'dev') }}" == "true" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "ami_name=${{ secrets.DEV_AMI_NAME }}" >> $GITHUB_OUTPUT
            echo "ami_owner=${{ secrets.DEV_AMI_OWNER }}" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == "staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "ami_name=${{ secrets.STAGING_AMI_NAME }}" >> $GITHUB_OUTPUT
            echo "ami_owner=${{ secrets.STAGING_AMI_OWNER }}" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == "main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "ami_name=${{ secrets.PROD_AMI_NAME }}" >> $GITHUB_OUTPUT
            echo "ami_owner=${{ secrets.PROD_AMI_OWNER }}" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "ami_name=${{ secrets.DEV_AMI_NAME }}" >> $GITHUB_OUTPUT
            echo "ami_owner=${{ secrets.DEV_AMI_OWNER }}" >> $GITHUB_OUTPUT
          fi
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-west-2' }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.0"
          
      - name: Terraform Init
        working-directory: ./hosting
        run: terraform init -input=false
        
      - name: Terraform Plan
        working-directory: ./hosting
        timeout-minutes: 10
        run: |
          terraform plan -input=false \
            -var="environment=${{ steps.env-config.outputs.environment }}" \
            -var="custom_ami_name=${{ steps.env-config.outputs.ami_name }}" \
            -var="custom_ami_owner=${{ steps.env-config.outputs.ami_owner }}" \
            -out=tfplan
            
      - name: Terraform Apply
        working-directory: ./hosting
        timeout-minutes: 15
        run: terraform apply -auto-approve -input=false tfplan
